<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
			http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
	        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd
	        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd">

	<context:component-scan base-package="com.wx,com.gyns,com.ecitic">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    
    <task:executor id="executor" pool-size="50" />     <!-- 可利用线程数 -->  
    <task:scheduler id="scheduler" pool-size="50" />   <!-- 可并发任务数 -->  
    <task:annotation-driven executor="executor" scheduler="scheduler" />
    
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:properties/jdbc.properties</value>
				<value>classpath:properties/redis.properties</value>
			</list>
		</property>
	</bean>  
	
	<bean id="propertiesString"
        class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath:properties/config.properties</value>
            </list>
        </property>
    </bean>
      
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
        init-method="init" destroy-method="close">
        <!-- 数据库基本信息配置 -->
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />        
        <!-- 初始化连接数量 -->
        <property name="initialSize" value="${jdbc.initialSize}" />
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="${jdbc.maxActive}" />
        <!-- 最大空闲连接数 -->
        <property name="maxIdle" value="${jdbc.maxIdle}" />
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="${jdbc.minIdle}" />
        <!-- 配置获取连接等待超时的时间 -->     
        <property name="maxWait" value="${jdbc.maxWait}" />
        <!-- 超过时间限制是否回收 -->
        <property name="removeAbandoned" value="${jdbc.removeAbandoned}" />
        <!-- 超过时间限制多长； -->
        <property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />
        <!-- 用来检测连接是否有效的sql，要求是一个查询语句-->
        <property name="validationQuery" value="${jdbc.validationQuery}" />
        <!-- 申请连接的时候检测 -->
        <property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
        <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
        <property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
        <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
        <property name="testOnReturn" value="${jdbc.testOnReturn}" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}" />     
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${jdbc.maxPoolPreparedStatementPerConnectionSize}" />
        <!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：                 
                                              监控统计用的filter:stat
                                             日志用的filter:log4j
                                                防御SQL注入的filter:wall -->
        <property name="filters" value="${jdbc.filters}" />       
    </bean>
	
   <!-- 配置druid监控spring jdbc -->
		<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor" />
   <!-- 每次请求都会生成一个新的对象 -->
		 <!-- <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
			<property name="patterns">
				<list>
					<value>com.wx.control.*</value>
				</list>
			</property>
		</bean> 
		 <aop:config proxy-target-class="true">
			<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
		</aop:config>   -->
	
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!--<tx:jta-transaction-manager /> -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	<!-- 用来指定 MyBatis 的 XML 配置文件路径。 如果基本的 MyBatis 配置需要改变, 那么这就是一个需要它的地方。 通常这会是<settings> 或<typeAliases>的部分。 -->
		<property name="configLocation"
			value="classpath:spring/orm-configuration.xml">
		</property>
		<!--<property name="transactionFactory">
		   <bean class="org.apache.ibatis.transaction.managed.ManagedTransactionFactory" />
		</property>--> 
		<!-- mapperLocations 属性使用一个资源位置的 list。 这个属性可以用来指定 MyBatis 的 XML 映射器文件的位置。 -->
		<property name="mapperLocations" >  	
			<array>
				<value>classpath:mapper/*.xml</value>
			</array>	
		</property>
		<!-- 多个用逗号隔开 -->
		<property name="typeAliasesPackage" value="com.wx.entity,com.gyns.entity"/>
		<property name="dataSource" ref="dataSource" />
		
		<!-- 分页 -->
		<property name="plugins">
		    <array>
		      <bean class="com.github.pagehelper.PageHelper">
		        <property name="properties">
		          <value>
		            dialect=mysql
		            reasonable=false
		          </value>
		        </property>
		      </bean>
		    </array>
	  </property>
	</bean>
	
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" >    
		<constructor-arg index="0" ref="sqlSessionFactory"/> 
	</bean> 
	<!-- 找到接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate"/>
		<!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />-->
		<!--<property name="sqlSessionTemplateBeanName" value="sqlSessionFactory" /> -->
		
		<!-- 多个用逗号隔开 -->
		<property name="basePackage" value="com.wx.dao,com.gyns.dao,com.ecitic.dao" />
	</bean>
	<!-- 使用注解方式的事务 -->  
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- 事务配置 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="create*" read-only="false"
				rollback-for="Exception" propagation="REQUIRED" />
			<tx:method name="insert*" read-only="false"
				rollback-for="Exception" propagation="REQUIRED" />
			<tx:method name="add*" read-only="false"
				rollback-for="Exception" propagation="REQUIRED" />
			<tx:method name="update*" read-only="false"
				rollback-for="Exception" propagation="REQUIRED" />			
			<tx:method name="delete*" read-only="false"
				rollback-for="Exception" propagation="REQUIRED" />	
			<tx:method name="do*" read-only="false"
				rollback-for="Exception" propagation="REQUIRED" />
			<tx:method name="execute*" read-only="false"
				rollback-for="Exception" propagation="REQUIRED" />
			<tx:method name="getAccessToken" read-only="false"
				rollback-for="Exception" propagation="REQUIRED" />
			<tx:method name="*" read-only="true" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	
	<!-- Service层Method切面 begin-->
	<!-- 事务配置 -->
	<aop:config proxy-target-class="true">
		<aop:pointcut id="wxServiceTx" expression="execution(* com.*.service.impl.*.*(..))" />
		<!-- <aop:pointcut id="controllerTx" expression="execution(* com.*.contrl.*.*(..))" /> -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="wxServiceTx" />
		<!-- <aop:advisor advice-ref="txAdvice" pointcut-ref="controllerTx" /> -->
	</aop:config>

 <!-- id services 数据库字段char(18)最大长度18位循环 init 创建默认typeColName char(2) idColName char(18)-->
    <bean id="idFactoryTable" class="com.wx.seqno.IdTable" init-method="init">
        <property name="dataSource" ref="dataSource"></property>
        <property name="tableName">
            <value>md_system_seqno</value>
        </property>
        <property name="typeColName">
            <value>seq_type</value>
        </property>
        <property name="idColName">
            <value>seq_no</value>
        </property>
        <!--param name="rangeColName">range</param -->
    </bean>
     <bean id="IdFactory00"
        class="com.wx.seqno.StepSequenceFactoryForSpdb">
        <property name="table" ref="idFactoryTable"></property>
        <property name="format">
            <value>{################}</value>
        </property>
        <property name="type">
            <value>00</value>
        </property>
        <property name="step">
            <value>100</value>
        </property>
     </bean>
     <bean id="IdFactory01"
        class="com.wx.seqno.StepSequenceFactoryForSpdb">
        <property name="table" ref="idFactoryTable"></property>
        <property name="format">
            <value>{################}</value>
        </property>
        <property name="type">
            <value>01</value>
        </property>
        <property name="step">
            <value>100</value>
        </property>
     </bean>
    <!-- 流水号配置,迁移到代码中,参考 SeqnoFactoryImpl.getHbMchBillno() -->
    
    <bean id="propertiesUtilBean" class="com.wx.util.PropertiesUtilBean" init-method="init">
    	<property name="baseNames">
    		<array>
	    		<value>properties.config</value>
    		</array>
    	</property>
    </bean>

	<!-- 配置线程池 -->
	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 线程池维护线程的最少数量 -->
		<property name="corePoolSize" value="5" />
		<!-- 线程池维护线程所允许的空闲时间 -->
		<property name="keepAliveSeconds" value="30000" />
		<!-- 线程池维护线程的最大数量 -->
		<property name="maxPoolSize" value="1000" />
		<!-- 线程池所使用的缓冲队列 -->
		<property name="queueCapacity" value="200" />
	</bean>

	<!-- Redis config start -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="${redis.maxIdle}" />
		<property name="maxTotal" value="${redis.maxActive}" />
		<property name="maxWaitMillis" value="${redis.maxWait}" />
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
	</bean>

	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		destroy-method="destroy">
		<property name="hostName" value="${redis.host}" />
		<property name="port" value="${redis.port}" />
		<property name="database" value="${redis.default.db}"/>
		<property name="poolConfig" ref="jedisPoolConfig" />
	</bean>

	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
		<property name="keySerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<bean
				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
	</bean>
	<!-- Redis config end -->
</beans>
